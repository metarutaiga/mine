#pragma once

static const struct {
    const char* name;
    void (*syscall)(CALLBACK_ARGUMENT);
} syscall_table[] = {

    // assert
    { "assert",         INT32(syscall_assert(stack))                    },

    // ctype
    { "isalnum",        INT32(syscall_isalnum(stack))                   },
    { "isalpha",        INT32(syscall_isalpha(stack))                   },
    { "iscntrl",        INT32(syscall_iscntrl(stack))                   },
    { "isdigit",        INT32(syscall_isdigit(stack))                   },
    { "isgraph",        INT32(syscall_isgraph(stack))                   },
    { "islower",        INT32(syscall_islower(stack))                   },
    { "isprint",        INT32(syscall_isprint(stack))                   },
    { "ispunct",        INT32(syscall_ispunct(stack))                   },
    { "isspace",        INT32(syscall_isspace(stack))                   },
    { "isupper",        INT32(syscall_isupper(stack))                   },
    { "isxdigit",       INT32(syscall_isxdigit(stack))                  },
    { "tolower",        INT32(syscall_tolower(stack))                   },
    { "toupper",        INT32(syscall_toupper(stack))                   },

    // locale
    { "localeconv",     INT32(syscall_localeconv(memory))                   },
    { "setlocale",      INT32(syscall_setlocale(memory, stack, allocator))  },

    // math
    { "acos",           FLT64(syscall_acos(stack))                      },
    { "acosh",          FLT64(syscall_acosh(stack))                     },
    { "asin",           FLT64(syscall_asin(stack))                      },
    { "asinh",          FLT64(syscall_asinh(stack))                     },
    { "atan",           FLT64(syscall_atan(stack))                      },
    { "atan2",          FLT64(syscall_atan2(stack))                     },
    { "atanh",          FLT64(syscall_atanh(stack))                     },
    { "cbrt",           FLT64(syscall_cbrt(stack))                      },
    { "ceil",           FLT64(syscall_ceil(stack))                      },
    { "copysign",       FLT64(syscall_copysign(stack))                  },
    { "cos",            FLT64(syscall_cos(stack))                       },
    { "cosh",           FLT64(syscall_cosh(stack))                      },
    { "erf",            FLT64(syscall_erf(stack))                       },
    { "erfc",           FLT64(syscall_erfc(stack))                      },
    { "exp",            FLT64(syscall_exp(stack))                       },
    { "exp2",           FLT64(syscall_exp2(stack))                      },
    { "expm1",          FLT64(syscall_expm1(stack))                     },
    { "fabs",           FLT64(syscall_fabs(stack))                      },
    { "fdim",           FLT64(syscall_fdim(stack))                      },
    { "floor",          FLT64(syscall_floor(stack))                     },
    { "fma",            FLT64(syscall_fma(stack))                       },
    { "fmax",           FLT64(syscall_fmax(stack))                      },
    { "fmin",           FLT64(syscall_fmin(stack))                      },
    { "fmod",           FLT64(syscall_fmod(stack))                      },
    { "fpclassify",     INT32(syscall_fpclassify(stack))                },
    { "frexp",          FLT64(syscall_frexp(memory, stack))             },
    { "hypot",          FLT64(syscall_hypot(stack))                     },
    { "ilogb",          INT32(syscall_ilogb(stack))                     },
    { "isfinite",       INT32(syscall_isfinite(stack))                  },
    { "isgreater",      INT32(syscall_isgreater(stack))                 },
    { "isgreaterequal", INT32(syscall_isgreaterequal(stack))            },
    { "isinf",          INT32(syscall_isinf(stack))                     },
    { "isless",         INT32(syscall_isless(stack))                    },
    { "islessequal",    INT32(syscall_islessequal(stack))               },
    { "islessgreater",  INT32(syscall_islessgreater(stack))             },
    { "isnan",          INT32(syscall_isnan(stack))                     },
    { "isnormal",       INT32(syscall_isnormal(stack))                  },
    { "isunordered",    INT32(syscall_isunordered(stack))               },
    { "ldexp",          FLT64(syscall_ldexp(stack))                     },
    { "lgamma",         FLT64(syscall_lgamma(stack))                    },
    { "llrint",         INT64(syscall_llrint(stack))                    },
    { "llround",        INT64(syscall_llround(stack))                   },
    { "log",            FLT64(syscall_log(stack))                       },
    { "log10",          FLT64(syscall_log10(stack))                     },
    { "log1p",          FLT64(syscall_log1p(stack))                     },
    { "log2",           FLT64(syscall_log2(stack))                      },
    { "logb",           FLT64(syscall_logb(stack))                      },
    { "lrint",          INT32(syscall_lrint(stack))                     },
    { "lround",         INT32(syscall_lround(stack))                    },
    { "modf",           FLT64(syscall_modf(memory, stack))              },
    { "nan",            FLT64(syscall_nan(memory, stack))               },
    { "nanf",           FLT64(syscall_nanf(memory, stack))              },
    { "nanl",           FLT64(syscall_nanl(memory, stack))              },
    { "nearbyint",      FLT64(syscall_nearbyint(stack))                 },
    { "nextafter",      FLT64(syscall_nextafter(stack))                 },
    { "nexttoward",     FLT64(syscall_nexttoward(stack))                },
    { "pow",            FLT64(syscall_pow(stack))                       },
    { "remainder",      FLT64(syscall_remainder(stack))                 },
    { "remquo",         FLT64(syscall_remquo(memory, stack))            },
    { "rint",           FLT64(syscall_rint(stack))                      },
    { "round",          FLT64(syscall_round(stack))                     },
    { "scalbln",        FLT64(syscall_scalbln(stack))                   },
    { "scalbn",         FLT64(syscall_scalbn(stack))                    },
    { "signbit",        INT32(syscall_signbit(stack))                   },
    { "sin",            FLT64(syscall_sin(stack))                       },
    { "sinh",           FLT64(syscall_sinh(stack))                      },
    { "sqrt",           FLT64(syscall_sqrt(stack))                      },
    { "tan",            FLT64(syscall_tan(stack))                       },
    { "tanh",           FLT64(syscall_tanh(stack))                      },
    { "tgamma",         FLT64(syscall_tgamma(stack))                    },
    { "trunc",          FLT64(syscall_trunc(stack))                     },

    // setjmp
    { "longjmp",        INT32(syscall_longjmp(memory, stack, cpu))      },
    { "setjmp",         INT32(syscall_setjmp(memory, stack, cpu))       },

    // signal
    { "raise",          INT32(syscall_raise(stack))                     },

    // stdio
    { "clearerr",       INT32(syscall_clearerr(memory, stack))          },
    { "fclose",         INT32(syscall_fclose(memory, stack, allocator)) },
    { "feof",           INT32(syscall_feof(memory, stack))              },
    { "ferror",         INT32(syscall_ferror(memory, stack))            },
    { "fflush",         INT32(syscall_fflush(memory, stack))            },
    { "fgetc",          INT32(syscall_fgetc(memory, stack))             },
    { "fgetpos",        INT32(syscall_fgetpos(memory, stack))           },
    { "fgets",          INT32(syscall_fgets(memory, stack))             },
    { "fopen",          INT32(syscall_fopen(memory, stack, allocator))  },
    { "fprintf",        INT32(syscall_fprintf(memory, stack))           },
    { "fputc",          INT32(syscall_fputc(memory, stack))             },
    { "fputs",          INT32(syscall_fputs(memory, stack))             },
    { "fread",          INT32(syscall_fread(memory, stack))             },
    { "freopen",        INT32(syscall_freopen(memory, stack))           },
    { "fscanf",         INT32(syscall_fscanf(memory, stack))            },
    { "fseek",          INT32(syscall_fseek(memory, stack))             },
    { "fsetpos",        INT32(syscall_fsetpos(memory, stack))           },
    { "ftell",          INT32(syscall_ftell(memory, stack))             },
    { "fwrite",         INT32(syscall_fwrite(memory, stack))            },
    { "getc",           INT32(syscall_getc(memory, stack))              },
    { "getchar",        INT32(syscall_getchar())                        },
    { "gets",           INT32(syscall_gets(memory, stack))              },
    { "perror",         INT32(syscall_perror(memory, stack))            },
    { "printf",         INT32(syscall_printf(memory, stack))            },
    { "putc",           INT32(syscall_putc(memory, stack))              },
    { "putchar",        INT32(syscall_putchar(memory, stack))           },
    { "puts",           INT32(syscall_puts(memory, stack))              },
    { "remove",         INT32(syscall_remove(memory, stack))            },
    { "rename",         INT32(syscall_rename(memory, stack))            },
    { "rewind",         INT32(syscall_rewind(memory, stack))            },
    { "scanf",          INT32(syscall_scanf(memory, stack))             },
    { "setbuf",         INT32(syscall_setbuf(memory, stack))            },
    { "setvbuf",        INT32(syscall_setvbuf(memory, stack))           },
    { "snprintf",       INT32(syscall_snprintf(memory, stack))          },
    { "sprintf",        INT32(syscall_sprintf(memory, stack))           },
    { "sscanf",         INT32(syscall_sscanf(memory, stack))            },
    { "tmpfile",        INT32(syscall_tmpfile(memory, allocator))       },
    { "tmpnam",         INT32(syscall_tmpnam(memory, stack))            },
    { "ungetc",         INT32(syscall_ungetc(memory, stack))            },
    { "vfprintf",       INT32(syscall_vfprintf(memory, stack))          },
    { "vfscanf",        INT32(syscall_vfscanf(memory, stack))           },
    { "vprintf",        INT32(syscall_vprintf(memory, stack))           },
    { "vscanf",         INT32(syscall_vscanf(memory, stack))            },
    { "vsnprintf",      INT32(syscall_vsnprintf(memory, stack))         },
    { "vsprintf",       INT32(syscall_vsprintf(memory, stack))          },

    // stdlib
    { "_Exit",          INT32(syscall__Exit(stack))                     },
    { "abort",          INT32(syscall_abort())                          },
    { "abs",            INT32(syscall_abs(stack))                       },
    { "at_quick_exit",  INT32(syscall_at_quick_exit(memory, stack))     },
    { "atexit",         INT32(syscall_atexit(memory, stack))            },
    { "atof",           FLT64(syscall_atof(memory, stack))              },
    { "atoi",           INT32(syscall_atoi(memory, stack))              },
    { "atol",           INT32(syscall_atol(memory, stack))              },
    { "atoll",          INT64(syscall_atoll(memory, stack))             },
    { "bsearch",        INT32(syscall_bsearch(memory, stack))           },
    { "calloc",         INT32(syscall_calloc(stack, allocator))         },
    { "div",            DIV32(syscall_div(stack))                       },
    { "exit",           INT32(syscall_exit(stack))                      },
    { "free",           INT32(syscall_free(stack, allocator))           },
    { "getenv",         INT32(syscall_getenv(memory, stack))            },
    { "labs",           INT32(syscall_labs(stack))                      },
    { "ldiv",           DIV32(syscall_ldiv(stack))                      },
    { "llabs",          INT64(syscall_llabs(stack))                     },
    { "lldiv",          DIV64(syscall_lldiv(stack))                     },
    { "malloc",         INT32(syscall_malloc(stack, allocator))         },
    { "mblen",          INT32(syscall_mblen(memory, stack))             },
    { "mbstowcs",       INT32(syscall_mbstowcs(memory, stack))          },
    { "mbtowc",         INT32(syscall_mbtowc(memory, stack))            },
    { "qsort",          INT32(syscall_qsort(memory, stack))             },
    { "quick_exit",     INT32(syscall_quick_exit(stack))                },
    { "rand",           INT32(syscall_rand())                           },
    { "realloc",        INT32(syscall_realloc(stack, allocator))        },
    { "srand",          INT32(syscall_srand(stack))                     },
    { "strtod",         FLT64(syscall_strtod(memory, stack))            },
    { "strtof",         FLT64(syscall_strtof(memory, stack))            },
    { "strtol",         INT32(syscall_strtol(memory, stack))            },
    { "strtold",        FLT64(syscall_strtold(memory, stack))           },
    { "strtoll",        INT64(syscall_strtoll(memory, stack))           },
    { "strtoul",        INT32(syscall_strtoul(memory, stack))           },
    { "strtoull",       INT64(syscall_strtoull(memory, stack))          },
    { "system",         INT32(syscall_system(memory, stack))            },
    { "wcstombs",       INT32(syscall_wcstombs(memory, stack))          },
    { "wctomb",         INT32(syscall_wctomb(memory, stack))            },

    // string
    { "memchr",         INT32(syscall_memchr(memory, stack))            },
    { "memcmp",         INT32(syscall_memcmp(memory, stack))            },
    { "memcpy",         INT32(syscall_memcpy(memory, stack))            },
    { "memmove",        INT32(syscall_memmove(memory, stack))           },
    { "memset",         INT32(syscall_memset(memory, stack))            },
    { "strcat",         INT32(syscall_strcat(memory, stack))            },
    { "strchr",         INT32(syscall_strchr(memory, stack))            },
    { "strcmp",         INT32(syscall_strcmp(memory, stack))            },
    { "strcoll",        INT32(syscall_strcoll(memory, stack))           },
    { "strcpy",         INT32(syscall_strcpy(memory, stack))            },
    { "strcspn",        INT32(syscall_strcspn(memory, stack))           },
    { "strerror",       INT32(syscall_strerror(memory, stack))          },
    { "strlen",         INT32(syscall_strlen(memory, stack))            },
    { "strncat",        INT32(syscall_strncat(memory, stack))           },
    { "strncmp",        INT32(syscall_strncmp(memory, stack))           },
    { "strncpy",        INT32(syscall_strncpy(memory, stack))           },
    { "strpbrk",        INT32(syscall_strpbrk(memory, stack))           },
    { "strrchr",        INT32(syscall_strrchr(memory, stack))           },
    { "strspn",         INT32(syscall_strspn(memory, stack))            },
    { "strstr",         INT32(syscall_strstr(memory, stack))            },
    { "strtok",         INT32(syscall_strtok(memory, stack))            },
    { "strxfrm",        INT32(syscall_strxfrm(memory, stack))           },

    // time
    { "asctime",        INT32(syscall_asctime(memory, stack))           },
    { "clock",          INT32(syscall_clock())                          },
    { "ctime",          INT32(syscall_ctime(memory, stack))             },
    { "difftime",       FLT64(syscall_difftime(stack))                  },
    { "gmtime",         INT32(syscall_gmtime(memory, stack))            },
    { "localtime",      INT32(syscall_localtime(memory, stack))         },
    { "mktime",         INT32(syscall_mktime(memory, stack))            },
    { "strftime",       INT32(syscall_strftime(memory, stack))          },
    { "time",           INT32(syscall_time(memory, stack))              },

    // unistd
    { "chdir",          INT32(syscall_chdir(memory, stack))             },
    { "getcwd",         INT32(syscall_getcwd(memory, stack))            },

    // wchar
    { "btowc",          INT32(syscall_btowc(memory, stack))             },
    { "fgetwc",         INT32(syscall_fgetwc(memory, stack))            },
    { "fgetws",         INT32(syscall_fgetws(memory, stack))            },
    { "fputwc",         INT32(syscall_fputwc(memory, stack))            },
    { "fputws",         INT32(syscall_fputws(memory, stack))            },
    { "fwide",          INT32(syscall_fwide(memory, stack))             },
    { "fwprintf",       INT32(syscall_fwprintf(memory, stack))          },
    { "fwscanf",        INT32(syscall_fwscanf(memory, stack))           },
    { "getwc",          INT32(syscall_getwc(memory, stack))             },
    { "getwchar",       INT32(syscall_getwchar(memory, stack))          },
    { "mbrlen",         INT32(syscall_mbrlen(memory, stack))            },
    { "mbrtowc",        INT32(syscall_mbrtowc(memory, stack))           },
    { "mbsinit",        INT32(syscall_mbsinit(memory, stack))           },
    { "mbsrtowcs",      INT32(syscall_mbsrtowcs(memory, stack))         },
    { "putwc",          INT32(syscall_putwc(memory, stack))             },
    { "putwchar",       INT32(syscall_putwchar(memory, stack))          },
    { "swprintf",       INT32(syscall_swprintf(memory, stack))          },
    { "swscanf",        INT32(syscall_swscanf(memory, stack))           },
    { "ungetwc",        INT32(syscall_ungetwc(memory, stack))           },
    { "vfwprintf",      INT32(syscall_vfwprintf(memory, stack))         },
    { "vfwscanf",       INT32(syscall_vfwscanf(memory, stack))          },
    { "vswprintf",      INT32(syscall_vswprintf(memory, stack))         },
    { "vswscanf",       INT32(syscall_vswscanf(memory, stack))          },
    { "vwprintf",       INT32(syscall_vwprintf(memory, stack))          },
    { "vwscanf",        INT32(syscall_vwscanf(memory, stack))           },
    { "wcrtomb",        INT32(syscall_wcrtomb(memory, stack))           },
    { "wcscat",         INT32(syscall_wcscat(memory, stack))            },
    { "wcschr",         INT32(syscall_wcschr(memory, stack))            },
    { "wcscmp",         INT32(syscall_wcscmp(memory, stack))            },
    { "wcscoll",        INT32(syscall_wcscoll(memory, stack))           },
    { "wcscpy",         INT32(syscall_wcscpy(memory, stack))            },
    { "wcscspn",        INT32(syscall_wcscspn(memory, stack))           },
    { "wcsftime",       INT32(syscall_wcsftime(memory, stack))          },
    { "wcslen",         INT32(syscall_wcslen(memory, stack))            },
    { "wcsncat",        INT32(syscall_wcsncat(memory, stack))           },
    { "wcsncmp",        INT32(syscall_wcsncmp(memory, stack))           },
    { "wcsncpy",        INT32(syscall_wcsncpy(memory, stack))           },
    { "wcspbrk",        INT32(syscall_wcspbrk(memory, stack))           },
    { "wcsrchr",        INT32(syscall_wcsrchr(memory, stack))           },
    { "wcsrtombs",      INT32(syscall_wcsrtombs(memory, stack))         },
    { "wcsspn",         INT32(syscall_wcsspn(memory, stack))            },
    { "wcsstr",         INT32(syscall_wcsstr(memory, stack))            },
    { "wcstod",         FLT64(syscall_wcstod(memory, stack))            },
    { "wcstof",         FLT64(syscall_wcstof(memory, stack))            },
    { "wcstok",         INT32(syscall_wcstok(memory, stack))            },
    { "wcstol",         INT32(syscall_wcstol(memory, stack))            },
    { "wcstold",        FLT64(syscall_wcstold(memory, stack))           },
    { "wcstoll",        INT64(syscall_wcstoll(memory, stack))           },
    { "wcstoul",        INT32(syscall_wcstoul(memory, stack))           },
    { "wcstoull",       INT64(syscall_wcstoull(memory, stack))          },
    { "wcsxfrm",        INT32(syscall_wcsxfrm(memory, stack))           },
    { "wctob",          INT32(syscall_wctob(memory, stack))             },
    { "wmemchr",        INT32(syscall_wmemchr(memory, stack))           },
    { "wmemcmp",        INT32(syscall_wmemcmp(memory, stack))           },
    { "wmemcpy",        INT32(syscall_wmemcpy(memory, stack))           },
    { "wmemmove",       INT32(syscall_wmemmove(memory, stack))          },
    { "wmemset",        INT32(syscall_wmemset(memory, stack))           },
    { "wprintf",        INT32(syscall_wprintf(memory, stack))           },
    { "wscanf",         INT32(syscall_wscanf(memory, stack))            },

    // wctype
    { "iswalnum",       INT32(syscall_iswalnum(stack))                  },
    { "iswalpha",       INT32(syscall_iswalpha(stack))                  },
    { "iswblank",       INT32(syscall_iswblank(stack))                  },
    { "iswcntrl",       INT32(syscall_iswcntrl(stack))                  },
    { "iswctype",       INT32(syscall_iswctype(stack))                  },
    { "iswdigit",       INT32(syscall_iswdigit(stack))                  },
    { "iswgraph",       INT32(syscall_iswgraph(stack))                  },
    { "iswlower",       INT32(syscall_iswlower(stack))                  },
    { "iswprint",       INT32(syscall_iswprint(stack))                  },
    { "iswpunct",       INT32(syscall_iswpunct(stack))                  },
    { "iswspace",       INT32(syscall_iswspace(stack))                  },
    { "iswupper",       INT32(syscall_iswupper(stack))                  },
    { "iswxdigit",      INT32(syscall_iswxdigit(stack))                 },
    { "towctrans",      INT32(syscall_towctrans(stack))                 },
    { "towlower",       INT32(syscall_towlower(stack))                  },
    { "towupper",       INT32(syscall_towupper(stack))                  },
    { "wctrans",        INT32(syscall_wctrans(memory, stack))           },
    { "wctype",         INT32(syscall_wctype(memory, stack))            },
};
